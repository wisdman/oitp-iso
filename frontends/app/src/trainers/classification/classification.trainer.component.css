:host {
  --gap: 1px;
  --padding: 2px;
  --text-padding: 24px;

  --animation-duration: 5s;
  --result-animation-duration: 250ms;

  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: min-content auto min-content;

  width: 100%;
  min-width: 100%;
  flex: 1 1 100%;
  max-height: 100%;

  position: relative;
  overflow: hidden;

  font-family: inherit;
  font-size: 16px;
}

.word {
  width: 100%;
  max-width: 700px;
  justify-self: center;

  margin: 0;
  padding: 0 8px;

  display: flex;
  flex-direction: column;
  justify-content: stretch;
  align-items: stretch;

  position: relative;
  overflow: hidden;
}

.word::after{
  content: "";
  display: block;
  position: absolute;
  left: 0;
  right: 0;
  width: 100%;
  top: 0;
  height: 60px;

  background-image: linear-gradient(var(--color-background) 0%, var(--color-background) 30%, rgba(250, 250, 250,.001) 100%);
  background-size: 100%;
  background-repeat: no-repeat;

  border-radius: 9px;
  overflow: hidden;
}

.word-text {
  flex-grow: 1;
  flex-shrink: 0;
  flex-basis: 100%;

  display: block;
  width: 100%;
  height: 100%;

  font-size: 24px;
  font-weight: 600;
  line-height: 1.3;

  text-align: center;
  transform: translate(0, 110%);
  transform-origin: top;
}

.word-text--definitions {
  font-size: 18px;
}

.word-text.animate {
  animation-name: classification_words_data-text_move;
  animation-duration: calc(var(--animation-duration) * 1.4);
  animation-delay: 100ms;
}

@keyframes classification_words_data-text_move {
  0% { opacity: 1; transform: translate(0, 0); }
  30% { opacity: 1; }
  80% { opacity: 0; }
  100% { transform: translate(0, 110%); }
}

.matrix {
  display: block;
  width: 100%;
  max-width: 100%;

  flex-shrink: 0;
  flex-basis: auto;
  height: auto;

  margin-left: auto;
  margin-right: auto;

  font-family: inherit;
  font-size: 16px;
}

.item {
  cursor: pointer;
}

.path {
  stroke: var(--trainer-border-color);
  stroke-width: 1;
  fill: none;

  position: relative;
  z-index: 999;
}

.item--colors:hover .path {
  stroke: var(--trainer-selected-color);
  stroke-width: 2;
}

.fill-path {
  stroke: none;
  stroke-width: 0;
}

.item--definitions .fill-path,
.item--words .fill-path {
  fill: var(--trainer-background-color);
}

.item--success .fill-path {
  fill:var(--trainer-success-background-color);
}

.item--error .fill-path {
  fill:var(--trainer-error-background-color);
}

.text {
  font-family: inherit;
  font-size: inherit;
  font-weight: 600;
  line-height: 1;
  color: var(--trainer-text-color);
  fill: currentColor;
}

.item:hover .text {
  color: var(--trainer-selected-color);
}
